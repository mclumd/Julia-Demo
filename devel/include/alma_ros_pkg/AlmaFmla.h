// Generated by gencpp from file alma_ros_pkg/AlmaFmla.msg
// DO NOT EDIT!


#ifndef ALMA_ROS_PKG_MESSAGE_ALMAFMLA_H
#define ALMA_ROS_PKG_MESSAGE_ALMAFMLA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace alma_ros_pkg
{
template <class ContainerAllocator>
struct AlmaFmla_
{
  typedef AlmaFmla_<ContainerAllocator> Type;

  AlmaFmla_()
    : code(0)
    , fmla()
    , trusted(false)  {
    }
  AlmaFmla_(const ContainerAllocator& _alloc)
    : code(0)
    , fmla(_alloc)
    , trusted(false)  {
    }



   typedef int32_t _code_type;
  _code_type code;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _fmla_type;
  _fmla_type fmla;

   typedef uint8_t _trusted_type;
  _trusted_type trusted;




  typedef boost::shared_ptr< ::alma_ros_pkg::AlmaFmla_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::alma_ros_pkg::AlmaFmla_<ContainerAllocator> const> ConstPtr;

}; // struct AlmaFmla_

typedef ::alma_ros_pkg::AlmaFmla_<std::allocator<void> > AlmaFmla;

typedef boost::shared_ptr< ::alma_ros_pkg::AlmaFmla > AlmaFmlaPtr;
typedef boost::shared_ptr< ::alma_ros_pkg::AlmaFmla const> AlmaFmlaConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::alma_ros_pkg::AlmaFmla_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::alma_ros_pkg::AlmaFmla_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace alma_ros_pkg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'alma_ros_pkg': ['/home/mcl/ROS/bobdemo_ws/src/alma_ros/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::alma_ros_pkg::AlmaFmla_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::alma_ros_pkg::AlmaFmla_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::alma_ros_pkg::AlmaFmla_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::alma_ros_pkg::AlmaFmla_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::alma_ros_pkg::AlmaFmla_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::alma_ros_pkg::AlmaFmla_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::alma_ros_pkg::AlmaFmla_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c9b259e2ef7db10347d3836a0db17661";
  }

  static const char* value(const ::alma_ros_pkg::AlmaFmla_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc9b259e2ef7db103ULL;
  static const uint64_t static_value2 = 0x47d3836a0db17661ULL;
};

template<class ContainerAllocator>
struct DataType< ::alma_ros_pkg::AlmaFmla_<ContainerAllocator> >
{
  static const char* value()
  {
    return "alma_ros_pkg/AlmaFmla";
  }

  static const char* value(const ::alma_ros_pkg::AlmaFmla_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::alma_ros_pkg::AlmaFmla_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Internal godel-style code for a formula, the formula itself, and whether or not it's currently trusted\n\
int32 code\n\
string fmla\n\
bool trusted\n\
";
  }

  static const char* value(const ::alma_ros_pkg::AlmaFmla_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::alma_ros_pkg::AlmaFmla_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.code);
      stream.next(m.fmla);
      stream.next(m.trusted);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct AlmaFmla_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::alma_ros_pkg::AlmaFmla_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::alma_ros_pkg::AlmaFmla_<ContainerAllocator>& v)
  {
    s << indent << "code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.code);
    s << indent << "fmla: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.fmla);
    s << indent << "trusted: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.trusted);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ALMA_ROS_PKG_MESSAGE_ALMAFMLA_H
